package handlers

import (
	"context"
	"fmt"
	"muse/internal/services/logger"
	"muse/internal/telegram/manager"

	"github.com/nlypage/intele/collector"
	tele "gopkg.in/telebot.v3"
)

func (ctl *Controller) greet(ctx tele.Context) error {
	_, tracksCount, err := ctl.storage.GetUser(context.Background(), ctx.Sender().ID)
	if err != nil {
		err := ctx.Send("–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –¥–ª—è –ø–ª–µ–π–ª–∏—Å—Ç–∞ –±—É–¥—É—â–µ–π –¥–∏—Å–∫–æ—Ç–µ–∫–∏! üéß\n \n" +
			"–ú—ã –∑–∞–±–æ—Ç–∏–º—Å—è –æ —Ç–æ–º, —á—Ç–æ–±—ã –≤–∞—à–∞ –¥–∏—Å–∫–æ—Ç–µ–∫–∞ –±—ã–ª–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞ –≤ –Ω–∞–∏–ª—É—á—à–µ–º –≤–∏–¥–µ ‚ù§\n \n" +
			"–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ø–µ—Å–Ω—é –∏ —è –¥–æ–±–∞–≤–ª—é –µ—ë –≤ –ø–ª–µ–π–ª–∏—Å—Ç, –µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä–æ–π–¥—ë—Ç –º–æ–¥–µ—Ä–∞—Ü–∏—é, —Ç–æ –æ–Ω–∞ –±—É–¥–µ—Ç –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ ‚ú®")
		if err != nil {
			logger.Log.Errorf("failed to respond: %v", err)
			return err
		}

		playlistId := ctl.config.Groups[0].PlaylistId

		if len(ctl.config.Groups) >= 2 {
			inputCollector := collector.New()
			stage := &manager.InputStage{
				Prompt:       "–í—ã–±–µ—Ä–µ—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É –¥–ª—è –ø–ª–µ–π–ª–∏—Å—Ç–∞",
				ErrorMessage: "–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑",
				IsValid: func(s string) bool {
					return false
				},
				Value: nil,
			}

			if err := manager.PromptForInput(inputCollector, ctx, stage); err != nil {
				logger.Log.Errorf("failed getting start input: %v", err)
				return err
			}

			if *stage.Value == "" {
				logger.Log.Errorf("start input is empty")
				return ctx.Send("–í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
			}

			playlistId = *stage.Value
		}

		ctl.storage.UpdateUser(context.Background(), ctx.Sender().ID, playlistId, 0)
	}

	return ctx.Send(fmt.Sprintf("‚ùó –í–∞—à –ª–∏–º–∏—Ç —Ç—Ä–µ–∫–æ–≤: %d. \n\n‚ùî –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", ctl.config.TracksLimit-tracksCount), startMenu(ctx.Sender().ID, ctl.config.AdminIds))
}
